================================================================================
System Information
================================================================================
- MacBook Pro 15-inch 2017
- 3.1 GHz Intel Core i7
- 16 GB 2133 MHz LPDDR3
- Intel HD Graphics 630 1536 MB 

================================================================================
IDE Information
================================================================================
- Xcode 10.3 (10G8)

================================================================================
API Used
================================================================================
- curl 7.65.1
- gson 2.8.5
- jsoncpp 1.8.0
- openssl 1.1.1c
- apache tomcat 9.0.21
- node modules 

================================================================================
How to install
================================================================================
*Note* Not all versions and settings need to be exactly as stated. However there
may be compatibility errors if using different versions.

--------------------------------------------------------------------------------
Step 1: Install and Set Up Ubuntu Server as a Virtual Machine
--------------------------------------------------------------------------------
- Download VirtualBox (6.0.8)
	- https://www.virtualbox.org/wiki/Downloads
- Download Ubuntu Server (18.04.2 LTS)
	- https://ubuntu.com/download/server
- Create new virtual machine
	- Turn on Virtual Box and create
	- Ram: 4096 MB
	- Storage: 10.0 GB
	- Type: Linux
	- Version: Ubuntu (64-bit)
- Set bootable device to the downloaded Ubuntu iso file
	- Enter Settings -> Storage
	- Click on the empty disk under "Controller: IDE"
	- Next to "Optical Drive:", click on the disk icon, and select
	  the downloaded iso file
- Start the device and follow the instructions to initialize the system
- Enter Settings -> Storage once again and eject the startup disk
		
--------------------------------------------------------------------------------
Step 2: Install Source Code
--------------------------------------------------------------------------------
- Download and unzip source code from the repository

--------------------------------------------------------------------------------
Step 3: Download Necessary APIs
--------------------------------------------------------------------------------
- The APIs will be separated into three sections, one for each language.
- C++:
	- Download cmake to install libraries
		- Open terminal and paste the following
		- MacOS: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		- Linux: sudo apt-get install linuxbrew-wrapper
			 sudo apt install cmake
		- brew install cmake
	- Download and extract jsoncpp (1.8.0)
		- https://github.com/open-source-parsers/jsoncpp
	- Open terminal and paste the following	
		- Move the folder into kj_server_benchmark/api
		- cd kj_server_benchmark/api/jsoncpp-master
		- mkdir -p build/debug
		- cd build/debug
		- cmake -DCMAKE_BUILD_TYPE=debug -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF -DARCHIVE_INSTALL_DIR=. -G "Unix Makefiles" ../..
		- make
	- Download and extract openssl (1.1.1c)
		- https://www.openssl.org/source/
	- Move the folder into kj_server_benchmark/api
	- Open terminal and paste the following
		- MacOS:
			- cd kj_server_benchmark/api/openssl-1.1.1c
			- ./Configure darwin64-x86_64-cc --openssldir=/usr/local/ssl
			- make
			- make test
		- Linux:
			./config -–prefix=.../kj_server_benchmark/api/openssl-1.1.1c -–openssldir=.../kj_server_benchmark/api/openssl-1.1.1c
			- make -j8
			- sudo make install
			- *Note* Make sure to replace ... with the location of the project
	- Download and extract curl (7.65.1)
		- https://curl.haxx.se/download.html
	- Move the folder into kj_server_benchmark/api
	- Open terminal and paste the following
		- ./configure --prefix=/usr/local/curl
		- make
		- sudo make install
- Java:
	- Download java. Open terminal and paste the following
		- apt-get install default-jdk
		- java -version 
		- nano ~/.bashrc
		- Paste the following at the very bottom (replace X with the java version found previously)
		- export JAVA_HOME=/usr/lib/jvm/java-X-openjdk-amd64
	- Download and extract apache tomcat (9.0.21)
		- https://tomcat.apache.org/download-90.cgi
	- Move the folder into kj_server_benchmark/api
	- Open terminal and paste the following
		- cd kj_server_benchmark/api/tomcat/apache-tomcat-9.0.21/ 
	- Create https connection
		- cd kj_server_benchmark/api/tomcat/apache-tomcat-9.0.21/conf
		- keytool  -genkey -alias server-alias -keyalg RSA -keypass changeit -storepass changeit -keystore localhost.jks
		- nano server.xml
		- Paste the following underneath <Connector port="8080" ... redirectPort="8443" />
		- <Connector
			protocol="HTTP/1.1"
			port="8443" maxThreads="200"
			scheme="https" secure="true" SSLEnabled="true"
			keystoreFile="conf\localhost.jks" keystorePass="xxxx"
			clinetAuth="false" sslProtocol="TLS" />
	- Create folders for libraries and classes
		- cd kj_server_benchmark/api/tomcat/apache-tomcat-9.0.21/webapps/ROOT/WEB-INF
		- mkdir classes
		- mkdir lib
	- Download gson (2.8.5)
		- https://search.maven.org/artifact/com.google.code.gson/gson/2.8.5/jar
	- Create new folder called gson in the api folder
		- cd kj_server_benchmark/api
		- mkdir gson
	- Move the .jar file to kj_server_benchmark/api/gson
	- Create a copy and move the copy to kj_server_benchmark/api/tomcat/apache-tomcat-9.0.21/webapps/ROOT/WEB-INF/classes
	- Download web.xml and replace it with the web.xml located at kj_server_benchmark/api/tomcat/apache-tomcat-9.0.21/webapps/ROOT/WEB-INF
- Node.js:
	- Download express
	- Open terminal and paste the following
		- cd kj_server_benchmark/api
		- npm install express@">=3.0.0 <4.0.0" --save

--------------------------------------------------------------------------------
Step 4: Update Header and Library Search Paths (Optional)
--------------------------------------------------------------------------------
*Note* If all the steps above are done exactly as stated, with all api 
downloaded to the same version, this step can be skipped. The steps will be 
separated for each library.

- Openssl
	- Locate and open 2019_summer_project_client.xcodeproj. It should be 
	  located at kj_server_benchmark/client/client
	- Click on the blue icon located near the top left
	- Go to Build Settings and locate the two flags "Header Search Paths"
	  and "Library Search Paths"
	- Update "Header Search Paths" to the correct openssl version
		- Change ../../api/openssl-1.1.1c/include to ../../api/openssl-X.X.Xx/include 
	- Update "Library Search Paths" to the correct openssl version
		- Change ../../api/openssl-1.1.1c to ../../api/openssl-X.X.Xx
	- Locate and open the makefile for the c++ servers. It should be located
	  at kj_server_benchmark/server/c++
	- Update the header search flag (both instances)
		- Change -I"../../api/openssl-1.1.1c/include" to -I"../../api/openssl-X.X.Xx/include"
	- Update the library search flag (both instances)
		- Change -L"../../openssl-1.1.1c" to -L"../../openssl-X.X.Xx"
- Tomcat
	- Locate and open the makefile for the java servlet server. It should 
	  be located at kj_server_benchmark/server/javaservlet
	- Update all five instances of apache-tomcat-9.0.21
		- Change apache-tomcat-9.0.21 to apache-tomcat-X.X.XX

- gson
	- Locate and open the makefile for the java servlet server. It should 
	  be located at kj_server_benchmark/server/javaservlet
	- Update class path
		- Change ../../api/gson/gson-2.8.5.jar to ../../api/gson/gson-X.X.X.jar

================================================================================
How to run program
================================================================================
Server:
	- There are currently four different servers that can be run.
	- All of them are located at kj_server_benchmark/server
	- Choose one of the servers out of the four that you want to test.
	
C++ Asynchronous Server:
	- *Note* This server can only be run on a linux based operating system.
	- Open the terminal and change directories to kj_server_benchmark/server/c++
		- cd kj_server_benchmark/server/c++
	- Compile and run the server
		- make async
	- Stop the server
		- Ctrl + C

C++ Synchronous Server:
	- Open the terminal and change directories to kj_server_benchmark/server/c++
		- cd kj_server_benchmark/server/c++
	- Compile and run the server
		- make sync
	- Stop the server
		- Ctrl + C

Java Servlet Server:
	- *Note* Unlike the others, this server does not have a command line.
	- Open the terminal and change directories to kj_server_benchmark/server/javaservlet
		- cd kj_server_benchmark/server/javaservlet
	- Compile and run the server
		- make
	- Stop the server
		- make stop

Node.js Server:
	- Open the terminal and change directories to kj_server_benchmark/server/node.js
		- cd kj_server_benchmark/server/node.js
	- Compile and run the server
		- make
	- Stop the server
		- Ctrl + C

Client: 
	- *Note* As of now, the client can only be run on Xcode. It means that 
	  it has to be run on MacOS.
	- Locate and open 2019_summer_project_client.xcodeproj. It should be 
	  located at kj_server_benchmark/client/client
	- At the top of main() in main.cpp, change the server type to the one
	  you want tested.
		- *Note* Both c++ servers use SERVER_CPLUSPLUS.
		- int serverType = SERVER_CPLUSPLUS;
		- int serverType = SERVER_JAVASERVLET;
		- int serverType = SERVER_NODEJS;
	- Change the ip address to the ip address of the server (no changes need
	  to be made if the server and client is run on the same device).
		- Replace all instances of 127.0.0.1 with the desired ip address
	- Build and run the client
		- ⌘ + R
	- Input values for number of simultaneous connections when prompted to 

================================================================================
Result
================================================================================
- If all steps are completed correctly, the following outcome should occur
	- No compile time error
		- A compile time error is most likely caused by incorrect build
		  paths. Check Step 4 of "How to Install".
	- The next few are dependant on the server
	- C++:
		- Client should be able to see encrypted message when typing in
		  the command line. There should also be a replay from the 
		  server saying "hello".
	- JavaServlet:
		- A connection should happen when connecting to the following 
		  web addresses
			- http://127.0.0.1:8080
			- http://127.0.0.1:8080/server
			- https://127.0.0.1:8443
			- https://127.0.0.1:8443/server
		- A debug prompt should appear on the client side
	- Node.js:
		- A connection should happen when connecting to the following 
		  web addresse
			- https://127.0.0.1:8443
		- A debug prompt should appear on the client side	


